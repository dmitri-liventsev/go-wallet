// Code generated by goa v3.17.2, DO NOT EDIT.
//
// transaction HTTP client CLI support package
//
// Command:
// $ goa gen wallet/design

package client

import (
	"encoding/json"
	"fmt"
	transaction "wallet/gen/transaction"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the transaction create endpoint
// from CLI flags.
func BuildCreatePayload(transactionCreateBody string, transactionCreateSourceType string) (*transaction.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(transactionCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"amount\": \"10.15\",\n      \"state\": \"win\",\n      \"transactionId\": \"some generated identificator\"\n   }'")
		}
		if !(body.State == "win" || body.State == "lost") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.state", body.State, []any{"win", "lost"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var sourceType string
	{
		sourceType = transactionCreateSourceType
		if !(sourceType == "game" || sourceType == "server" || sourceType == "payment") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("sourceType", sourceType, []any{"game", "server", "payment"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &transaction.CreatePayload{
		State:         body.State,
		Amount:        body.Amount,
		TransactionID: body.TransactionID,
	}
	v.SourceType = sourceType

	return v, nil
}

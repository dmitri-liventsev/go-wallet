// Code generated by goa v3.17.2, DO NOT EDIT.
//
// transaction HTTP client types
//
// Command:
// $ goa gen wallet/design

package client

import (
	transaction "wallet/gen/transaction"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "transaction" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// State of the transaction
	State string `form:"state" json:"state" xml:"state"`
	// Amount of the transaction
	Amount string `form:"amount" json:"amount" xml:"amount"`
	// Transaction ID
	TransactionID string `form:"transactionId" json:"transactionId" xml:"transactionId"`
}

// HealthcheckResponseBody is the type of the "transaction" service
// "healthcheck" endpoint HTTP response body.
type HealthcheckResponseBody struct {
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "transaction" service.
func NewCreateRequestBody(p *transaction.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		State:         p.State,
		Amount:        p.Amount,
		TransactionID: p.TransactionID,
	}
	return body
}

// NewHealthcheckResultOK builds a "transaction" service "healthcheck" endpoint
// result from a HTTP "OK" response.
func NewHealthcheckResultOK(body *HealthcheckResponseBody) *transaction.HealthcheckResult {
	v := &transaction.HealthcheckResult{
		Status: *body.Status,
	}

	return v
}

// ValidateHealthcheckResponseBody runs the validations defined on
// HealthcheckResponseBody
func ValidateHealthcheckResponseBody(body *HealthcheckResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}

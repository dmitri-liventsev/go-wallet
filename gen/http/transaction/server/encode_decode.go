// Code generated by goa v3.17.2, DO NOT EDIT.
//
// transaction HTTP server encoders and decoders
//
// Command:
// $ goa gen wallet/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	transaction "wallet/gen/transaction"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeHealthcheckResponse returns an encoder for responses returned by the
// transaction healthcheck endpoint.
func EncodeHealthcheckResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*transaction.HealthcheckResult)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewHealthcheckResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCreateResponse returns an encoder for responses returned by the
// transaction create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the transaction
// create endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			sourceType string
		)
		sourceType = r.Header.Get("Source-Type")
		if sourceType == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("sourceType", "header"))
		}
		if !(sourceType == "game" || sourceType == "server" || sourceType == "payment") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("sourceType", sourceType, []any{"game", "server", "payment"}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreatePayload(&body, sourceType)

		return payload, nil
	}
}

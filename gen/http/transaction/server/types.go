// Code generated by goa v3.17.2, DO NOT EDIT.
//
// transaction HTTP server types
//
// Command:
// $ goa gen wallet/design

package server

import (
	transaction "wallet/gen/transaction"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "transaction" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// State of the transaction
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Amount of the transaction
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Transaction ID
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// HealthcheckResponseBody is the type of the "transaction" service
// "healthcheck" endpoint HTTP response body.
type HealthcheckResponseBody struct {
	// Service status
	Status string `form:"status" json:"status" xml:"status"`
}

// NewHealthcheckResponseBody builds the HTTP response body from the result of
// the "healthcheck" endpoint of the "transaction" service.
func NewHealthcheckResponseBody(res *transaction.HealthcheckResult) *HealthcheckResponseBody {
	body := &HealthcheckResponseBody{
		Status: res.Status,
	}
	return body
}

// NewCreatePayload builds a transaction service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, sourceType string) *transaction.CreatePayload {
	v := &transaction.CreatePayload{
		State:         *body.State,
		Amount:        *body.Amount,
		TransactionID: *body.TransactionID,
	}
	v.SourceType = sourceType

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.State == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.TransactionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("transactionId", "body"))
	}
	if body.State != nil {
		if !(*body.State == "win" || *body.State == "lost") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.state", *body.State, []any{"win", "lost"}))
		}
	}
	return
}

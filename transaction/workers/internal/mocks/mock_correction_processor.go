// Code generated by MockGen. DO NOT EDIT.
// Source: C:\workspace\go\wallet\transaction\workers\correction.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entities "wallet/transaction/internal/domain/entities"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCorrectionProvider is a mock of CorrectionProvider interface.
type MockCorrectionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCorrectionProviderMockRecorder
}

// MockCorrectionProviderMockRecorder is the mock recorder for MockCorrectionProvider.
type MockCorrectionProviderMockRecorder struct {
	mock *MockCorrectionProvider
}

// NewMockCorrectionProvider creates a new mock instance.
func NewMockCorrectionProvider(ctrl *gomock.Controller) *MockCorrectionProvider {
	mock := &MockCorrectionProvider{ctrl: ctrl}
	mock.recorder = &MockCorrectionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCorrectionProvider) EXPECT() *MockCorrectionProviderMockRecorder {
	return m.recorder
}

// Provide mocks base method.
func (m *MockCorrectionProvider) Provide() (*entities.Correction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide")
	ret0, _ := ret[0].(*entities.Correction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockCorrectionProviderMockRecorder) Provide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockCorrectionProvider)(nil).Provide))
}

// MockCorrectionLocker is a mock of CorrectionLocker interface.
type MockCorrectionLocker struct {
	ctrl     *gomock.Controller
	recorder *MockCorrectionLockerMockRecorder
}

// MockCorrectionLockerMockRecorder is the mock recorder for MockCorrectionLocker.
type MockCorrectionLockerMockRecorder struct {
	mock *MockCorrectionLocker
}

// NewMockCorrectionLocker creates a new mock instance.
func NewMockCorrectionLocker(ctrl *gomock.Controller) *MockCorrectionLocker {
	mock := &MockCorrectionLocker{ctrl: ctrl}
	mock.recorder = &MockCorrectionLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCorrectionLocker) EXPECT() *MockCorrectionLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockCorrectionLocker) Lock(lockUuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", lockUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockCorrectionLockerMockRecorder) Lock(lockUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockCorrectionLocker)(nil).Lock), lockUuid)
}

// MockCorrectionProcessor is a mock of CorrectionProcessor interface.
type MockCorrectionProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockCorrectionProcessorMockRecorder
}

// MockCorrectionProcessorMockRecorder is the mock recorder for MockCorrectionProcessor.
type MockCorrectionProcessorMockRecorder struct {
	mock *MockCorrectionProcessor
}

// NewMockCorrectionProcessor creates a new mock instance.
func NewMockCorrectionProcessor(ctrl *gomock.Controller) *MockCorrectionProcessor {
	mock := &MockCorrectionProcessor{ctrl: ctrl}
	mock.recorder = &MockCorrectionProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCorrectionProcessor) EXPECT() *MockCorrectionProcessorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCorrectionProcessor) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCorrectionProcessorMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCorrectionProcessor)(nil).Execute))
}

// MockCorrectionSaver is a mock of CorrectionSaver interface.
type MockCorrectionSaver struct {
	ctrl     *gomock.Controller
	recorder *MockCorrectionSaverMockRecorder
}

// MockCorrectionSaverMockRecorder is the mock recorder for MockCorrectionSaver.
type MockCorrectionSaverMockRecorder struct {
	mock *MockCorrectionSaver
}

// NewMockCorrectionSaver creates a new mock instance.
func NewMockCorrectionSaver(ctrl *gomock.Controller) *MockCorrectionSaver {
	mock := &MockCorrectionSaver{ctrl: ctrl}
	mock.recorder = &MockCorrectionSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCorrectionSaver) EXPECT() *MockCorrectionSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockCorrectionSaver) Save(correction *entities.Correction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", correction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCorrectionSaverMockRecorder) Save(correction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCorrectionSaver)(nil).Save), correction)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: C:\workspace\go\wallet\transaction\workers\balance.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entities "wallet/transaction/internal/domain/entities"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTransactionProcessor is a mock of TransactionProcessor interface.
type MockTransactionProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProcessorMockRecorder
}

// MockTransactionProcessorMockRecorder is the mock recorder for MockTransactionProcessor.
type MockTransactionProcessorMockRecorder struct {
	mock *MockTransactionProcessor
}

// NewMockTransactionProcessor creates a new mock instance.
func NewMockTransactionProcessor(ctrl *gomock.Controller) *MockTransactionProcessor {
	mock := &MockTransactionProcessor{ctrl: ctrl}
	mock.recorder = &MockTransactionProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProcessor) EXPECT() *MockTransactionProcessorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTransactionProcessor) Execute(transaction *entities.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockTransactionProcessorMockRecorder) Execute(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTransactionProcessor)(nil).Execute), transaction)
}

// MockTransactionProvider is a mock of TransactionProvider interface.
type MockTransactionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProviderMockRecorder
}

// MockTransactionProviderMockRecorder is the mock recorder for MockTransactionProvider.
type MockTransactionProviderMockRecorder struct {
	mock *MockTransactionProvider
}

// NewMockTransactionProvider creates a new mock instance.
func NewMockTransactionProvider(ctrl *gomock.Controller) *MockTransactionProvider {
	mock := &MockTransactionProvider{ctrl: ctrl}
	mock.recorder = &MockTransactionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProvider) EXPECT() *MockTransactionProviderMockRecorder {
	return m.recorder
}

// GetLockedTransactions mocks base method.
func (m *MockTransactionProvider) GetLockedTransactions() ([]entities.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockedTransactions")
	ret0, _ := ret[0].([]entities.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLockedTransactions indicates an expected call of GetLockedTransactions.
func (mr *MockTransactionProviderMockRecorder) GetLockedTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockedTransactions", reflect.TypeOf((*MockTransactionProvider)(nil).GetLockedTransactions))
}

// LockNewTransactions mocks base method.
func (m *MockTransactionProvider) LockNewTransactions(lockUuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockNewTransactions", lockUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockNewTransactions indicates an expected call of LockNewTransactions.
func (mr *MockTransactionProviderMockRecorder) LockNewTransactions(lockUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockNewTransactions", reflect.TypeOf((*MockTransactionProvider)(nil).LockNewTransactions), lockUuid)
}
